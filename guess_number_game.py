import random
import json
import os
from datetime import datetime

class GuessNumberGame:
    def __init__(self, min_range=1, max_range=100, max_attempts=10):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        
        Args:
            min_range (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            max_range (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            max_attempts (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        """
        self.min_range = min_range
        self.max_range = max_range
        self.max_attempts = max_attempts
        self.secret_number = None
        self.attempts = 0
        self.guesses = []
        self.stats_file = "game_stats.json"
        self.start_time = None
        
    def generate_secret_number(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞"""
        self.secret_number = random.randint(self.min_range, self.max_range)
        self.attempts = 0
        self.guesses = []
        self.start_time = datetime.now()
        
    def display_welcome(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        print("üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'!")
        print("=" * 50)
        print(f"–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç {self.min_range} –¥–æ {self.max_range}.")
        print(f"–£ –≤–∞—Å –µ—Å—Ç—å {self.max_attempts} –ø–æ–ø—ã—Ç–æ–∫, —á—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å –µ–≥–æ!")
        print("–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏ —è –ø–æ–¥—Å–∫–∞–∂—É, –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ –≤–∞—à–µ —á–∏—Å–ª–æ.")
        print("=" * 50)
        
    def get_user_guess(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        while True:
            try:
                guess = input(f"\n–ü–æ–ø—ã—Ç–∫–∞ {self.attempts + 1}/{self.max_attempts}. –í–∞—à–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
                if not guess.strip():
                    print("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
                    continue
                    
                guess = int(guess)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                if guess < self.min_range or guess > self.max_range:
                    print(f"‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {self.min_range} –¥–æ {self.max_range}!")
                    continue
                    
                return guess
                
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
                
    def check_guess(self, guess):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.attempts += 1
        self.guesses.append(guess)
        
        if guess == self.secret_number:
            return "win"
        elif guess < self.secret_number:
            return "too_low"
        else:
            return "too_high"
            
    def provide_hint(self, result, guess):
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if result == "too_low":
            print(f"üìà –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ë–û–õ–¨–®–ï —á–µ–º {guess}")
        elif result == "too_high":
            print(f"üìâ –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ú–ï–ù–¨–®–ï —á–µ–º {guess}")
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫
        if self.attempts == 3:
            range_hint = self.get_range_hint()
            print(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: —á–∏—Å–ª–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É {range_hint[0]} –∏ {range_hint[1]}")
            
    def get_range_hint(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
        lower_bound = max(self.min_range, self.secret_number - 20)
        upper_bound = min(self.max_range, self.secret_number + 20)
        return (lower_bound, upper_bound)
        
    def display_attempts_left(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫"""
        attempts_left = self.max_attempts - self.attempts
        if attempts_left <= 3:
            print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}")
            
    def save_game_stats(self, won):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã"""
        end_time = datetime.now()
        duration = (end_time - self.start_time).seconds
        
        stats = {
            'timestamp': datetime.now().isoformat(),
            'secret_number': self.secret_number,
            'attempts': self.attempts,
            'won': won,
            'duration_seconds': duration,
            'guesses': self.guesses,
            'range': f"{self.min_range}-{self.max_range}"
        }
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        all_stats = self.load_all_stats()
        all_stats.append(stats)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        try:
            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump(all_stats, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
            
    def load_all_stats(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if os.path.exists(self.stats_file):
            try:
                with open(self.stats_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception:
                return []
        return []
        
    def display_stats(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.load_all_stats()
        if stats:
            total_games = len(stats)
            wins = sum(1 for game in stats if game['won'])
            win_rate = (wins / total_games) * 100
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä:")
            print(f"   –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}")
            print(f"   –ü–æ–±–µ–¥: {wins} ({win_rate:.1f}%)")
            
    def play_round(self):
        """–ò–≥—Ä–æ–≤–æ–π —Ä–∞—É–Ω–¥"""
        self.generate_secret_number()
        self.display_welcome()
        
        while self.attempts < self.max_attempts:
            guess = self.get_user_guess()
            result = self.check_guess(guess)
            
            if result == "win":
                print(f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {self.secret_number}!")
                print(f"üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {self.attempts}")
                self.save_game_stats(True)
                return True
            else:
                self.provide_hint(result, guess)
                self.display_attempts_left()
                
        print(f"\nüíî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ {self.max_attempts} –ø–æ–ø—ã—Ç–æ–∫.")
        print(f"üî¢ –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: {self.secret_number}")
        self.save_game_stats(False)
        return False
        
    def ask_for_replay(self):
        """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–≥—Ä—É"""
        while True:
            choice = input("\nüîÑ –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (–¥–∞/–Ω–µ—Ç): ").lower().strip()
            if choice in ['–¥–∞', '–¥', 'yes', 'y']:
                return True
            elif choice in ['–Ω–µ—Ç', '–Ω', 'no', 'n']:
                return False
            else:
                print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    game = GuessNumberGame(min_range=1, max_range=100, max_attempts=10)
    
    print("=" * 60)
    print("           –ò–ì–†–ê '–£–ì–ê–î–ê–ô –ß–ò–°–õ–û'")
    print("=" * 60)
    
    while True:
        game.play_round()
        game.display_stats()
        
        if not game.ask_for_replay():
            print("\nüëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        print("\n" + "=" * 50)
        print("          –ù–û–í–ê–Ø –ò–ì–†–ê")
        print("=" * 50)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
